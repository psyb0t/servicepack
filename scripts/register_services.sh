#!/bin/bash

set -e

echo "Adding services to registration file..."
REGISTRATION_FILE="internal/pkg/services/services.gen.go"
SERVICE_IF_FILE="internal/pkg/service-manager/service_manager.go"
SERVICE_IF_NAME="Service"
SERVICES_DIR="internal/pkg/services"

# Use gofindimpl to discover all service implementations
SERVICES_JSON=$(go tool gofindimpl \
    -interface ${SERVICE_IF_FILE}:${SERVICE_IF_NAME} \
    -dir ${SERVICES_DIR})

# Start generating the registration file
cat > "$REGISTRATION_FILE" << EOF
// Code generated by register_services.sh; DO NOT EDIT.

package services

EOF

# Parse JSON and add imports, init function, and add services
{
    echo "import ("
    echo "	\"os\""
    echo "	\"slices\""
    echo "	\"strings\""
    echo ""
    echo "	\"github.com/psyb0t/servicepack/internal/pkg/service-manager\""
    echo "$SERVICES_JSON" | jq -r '.[] | "\t" + .package + " \"" + .packagePath + "\""'
    echo "	\"github.com/sirupsen/logrus\""
    echo ")"
    echo ""
    echo "const ("
    echo "	envVarNameServicesEnabled = \"SERVICES_ENABLED\""
    echo ")"
    echo ""
    echo "func init() { //nolint:gochecknoinits"
    echo "	sm := servicemanager.GetServiceManagerInstance()"
    echo ""
    echo "	// Parse SERVICES_ENABLED env var"
    echo "	servicesEnabledEnv := os.Getenv(envVarNameServicesEnabled)"
    echo "	var enabledServices []string"
    echo "	allEnabled := true"
    echo ""
    echo "	if servicesEnabledEnv != \"\" {"
    echo "		allEnabled = false"
    echo "		parts := strings.Split(servicesEnabledEnv, \",\")"
    echo "		for _, part := range parts {"
    echo "			enabledServices = append(enabledServices, strings.TrimSpace(part))"
    echo "		}"
    echo "	}"
    echo ""
    echo "	var service servicemanager.Service"
    echo "	var err error"
    echo ""
    echo "$SERVICES_JSON" | jq -r '.[] | "\tif slices.Contains(enabledServices, " + .package + ".ServiceName) || allEnabled {\n\t\tservice, err = " + .package + ".New()\n\t\tif err != nil {\n\t\t\tlogrus.Fatalf(\"failed to create " + .package + " service: %v\", err)\n\t\t}\n\t\tsm.Add(service)\n\t}\n"'
    echo "}"
} >> "$REGISTRATION_FILE"

# Format the generated file and organize imports
go tool goimports -w "$REGISTRATION_FILE"

echo "Services added to file at $REGISTRATION_FILE"